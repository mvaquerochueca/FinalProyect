// require('dotenv').config()
// const { expect } = require('chai')
// const updateUserPassword = require('./updateUserPassword')
// const { writeFile, readFile } = require('fs')
// describe('updateUserPassword', () => {
//     let id, name, email, password, newPassword, newPasswordConfirm, avatar
//     beforeEach((done) => {
//         id = `id-${Math.round(Math.random() * 100 + 1)}`
//         name = `name-${Math.random()}`
//         email = `e-${Math.random()}@mail.com`
//         password = `password-${Math.random()}`
//         avatar = `avatar-${Math.random()}`
//         writeFile(`${process.env.DB_PATH}/users.json`, '[]', (error) =>
//             done(error)
//         )
//     })
//     it('succeds on changing the user password for the given one', (done) => {
//         newPassword = password + '-new'
//         newPasswordConfirm = newPassword
//         const users = [{ id, name, email, password, avatar }]
//         json = JSON.stringify(users)
//         writeFile(`${process.env.DB_PATH}/users.json`, json, (error) => {
//             expect(error).to.be.null
//             updateUserPassword(
//                 id,
//                 password,
//                 newPassword,
//                 newPasswordConfirm,
//                 (error) => {
//                     expect(error).to.be.null
//                     readFile(
//                         `${process.env.DB_PATH}/users.json`,
//                         (error, json) => {
//                             expect(error).to.be.null
//                             const users = JSON.parse(json)
//                             const user = users.find((user) => user.id === id)
//                             expect(user).to.exist
//                             expect(user.password).to.equal(newPassword)
//                             done()
//                         }
//                     )
//                 }
//             )
//         })
//     })
//     it('fails on non-existing user', (done) => {
//         newPassword = password + '-new'
//         newPasswordConfirm = newPassword
//         updateUserPassword(
//             id,
//             password,
//             newPassword,
//             newPasswordConfirm,
//             (error) => {
//                 expect(error).to.be.instanceOf(Error)
//                 expect(error.message).to.equal(`user with id ${id} not found`)
//                 done()
//             }
//         )
//     })
//     it('fails when new password equals current password', (done) => {
//         newPassword = password
//         newPasswordConfirm = newPassword + 'new'
//         expect(() => {
//             updateUserPassword(
//                 id,
//                 password,
//                 newPassword,
//                 newPasswordConfirm,
//                 () => {}
//             )
//         }).to.throw(
//             Error,
//             'New password must be different as previous password'
//         )
//         done()
//     })
//     after((done) => {
//         writeFile(`${process.env.DB_PATH}/users.json`, '[]', (error) => {
//             done()
//         })
//     })
// })
function cov_1kieg6yzui(){var path="/Users/mario/Desktop/FinalProyect/Api/logic/specs/updateUserPasword.spec.js";var hash="b4041cc11fe2ca5293b8551aefe4872ce424e8b6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/mario/Desktop/FinalProyect/Api/logic/specs/updateUserPasword.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b4041cc11fe2ca5293b8551aefe4872ce424e8b6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1kieg6yzui=function(){return actualCoverage;};}return actualCoverage;}cov_1kieg6yzui();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWtpZWc2eXp1aSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiXSwic291cmNlcyI6WyJ1cGRhdGVVc2VyUGFzd29yZC5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXG4vLyBjb25zdCB7IGV4cGVjdCB9ID0gcmVxdWlyZSgnY2hhaScpXG4vLyBjb25zdCB1cGRhdGVVc2VyUGFzc3dvcmQgPSByZXF1aXJlKCcuL3VwZGF0ZVVzZXJQYXNzd29yZCcpXG4vLyBjb25zdCB7IHdyaXRlRmlsZSwgcmVhZEZpbGUgfSA9IHJlcXVpcmUoJ2ZzJylcblxuLy8gZGVzY3JpYmUoJ3VwZGF0ZVVzZXJQYXNzd29yZCcsICgpID0+IHtcbi8vICAgICBsZXQgaWQsIG5hbWUsIGVtYWlsLCBwYXNzd29yZCwgbmV3UGFzc3dvcmQsIG5ld1Bhc3N3b3JkQ29uZmlybSwgYXZhdGFyXG5cbi8vICAgICBiZWZvcmVFYWNoKChkb25lKSA9PiB7XG4vLyAgICAgICAgIGlkID0gYGlkLSR7TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwICsgMSl9YFxuLy8gICAgICAgICBuYW1lID0gYG5hbWUtJHtNYXRoLnJhbmRvbSgpfWBcbi8vICAgICAgICAgZW1haWwgPSBgZS0ke01hdGgucmFuZG9tKCl9QG1haWwuY29tYFxuLy8gICAgICAgICBwYXNzd29yZCA9IGBwYXNzd29yZC0ke01hdGgucmFuZG9tKCl9YFxuLy8gICAgICAgICBhdmF0YXIgPSBgYXZhdGFyLSR7TWF0aC5yYW5kb20oKX1gXG5cbi8vICAgICAgICAgd3JpdGVGaWxlKGAke3Byb2Nlc3MuZW52LkRCX1BBVEh9L3VzZXJzLmpzb25gLCAnW10nLCAoZXJyb3IpID0+XG4vLyAgICAgICAgICAgICBkb25lKGVycm9yKVxuLy8gICAgICAgICApXG4vLyAgICAgfSlcblxuLy8gICAgIGl0KCdzdWNjZWRzIG9uIGNoYW5naW5nIHRoZSB1c2VyIHBhc3N3b3JkIGZvciB0aGUgZ2l2ZW4gb25lJywgKGRvbmUpID0+IHtcbi8vICAgICAgICAgbmV3UGFzc3dvcmQgPSBwYXNzd29yZCArICctbmV3J1xuLy8gICAgICAgICBuZXdQYXNzd29yZENvbmZpcm0gPSBuZXdQYXNzd29yZFxuXG4vLyAgICAgICAgIGNvbnN0IHVzZXJzID0gW3sgaWQsIG5hbWUsIGVtYWlsLCBwYXNzd29yZCwgYXZhdGFyIH1dXG5cbi8vICAgICAgICAganNvbiA9IEpTT04uc3RyaW5naWZ5KHVzZXJzKVxuXG4vLyAgICAgICAgIHdyaXRlRmlsZShgJHtwcm9jZXNzLmVudi5EQl9QQVRIfS91c2Vycy5qc29uYCwganNvbiwgKGVycm9yKSA9PiB7XG4vLyAgICAgICAgICAgICBleHBlY3QoZXJyb3IpLnRvLmJlLm51bGxcblxuLy8gICAgICAgICAgICAgdXBkYXRlVXNlclBhc3N3b3JkKFxuLy8gICAgICAgICAgICAgICAgIGlkLFxuLy8gICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuLy8gICAgICAgICAgICAgICAgIG5ld1Bhc3N3b3JkLFxuLy8gICAgICAgICAgICAgICAgIG5ld1Bhc3N3b3JkQ29uZmlybSxcbi8vICAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGVycm9yKS50by5iZS5udWxsXG5cbi8vICAgICAgICAgICAgICAgICAgICAgcmVhZEZpbGUoXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9jZXNzLmVudi5EQl9QQVRIfS91c2Vycy5qc29uYCxcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yLCBqc29uKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGVycm9yKS50by5iZS5udWxsXG5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UoanNvbilcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKCh1c2VyKSA9PiB1c2VyLmlkID09PSBpZClcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdCh1c2VyKS50by5leGlzdFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdCh1c2VyLnBhc3N3b3JkKS50by5lcXVhbChuZXdQYXNzd29yZClcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICApXG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgKVxuLy8gICAgICAgICB9KVxuLy8gICAgIH0pXG5cbi8vICAgICBpdCgnZmFpbHMgb24gbm9uLWV4aXN0aW5nIHVzZXInLCAoZG9uZSkgPT4ge1xuLy8gICAgICAgICBuZXdQYXNzd29yZCA9IHBhc3N3b3JkICsgJy1uZXcnXG4vLyAgICAgICAgIG5ld1Bhc3N3b3JkQ29uZmlybSA9IG5ld1Bhc3N3b3JkXG5cbi8vICAgICAgICAgdXBkYXRlVXNlclBhc3N3b3JkKFxuLy8gICAgICAgICAgICAgaWQsXG4vLyAgICAgICAgICAgICBwYXNzd29yZCxcbi8vICAgICAgICAgICAgIG5ld1Bhc3N3b3JkLFxuLy8gICAgICAgICAgICAgbmV3UGFzc3dvcmRDb25maXJtLFxuLy8gICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgZXhwZWN0KGVycm9yKS50by5iZS5pbnN0YW5jZU9mKEVycm9yKVxuLy8gICAgICAgICAgICAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50by5lcXVhbChgdXNlciB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApXG5cbi8vICAgICAgICAgICAgICAgICBkb25lKClcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgKVxuLy8gICAgIH0pXG5cbi8vICAgICBpdCgnZmFpbHMgd2hlbiBuZXcgcGFzc3dvcmQgZXF1YWxzIGN1cnJlbnQgcGFzc3dvcmQnLCAoZG9uZSkgPT4ge1xuLy8gICAgICAgICBuZXdQYXNzd29yZCA9IHBhc3N3b3JkXG4vLyAgICAgICAgIG5ld1Bhc3N3b3JkQ29uZmlybSA9IG5ld1Bhc3N3b3JkICsgJ25ldydcblxuLy8gICAgICAgICBleHBlY3QoKCkgPT4ge1xuLy8gICAgICAgICAgICAgdXBkYXRlVXNlclBhc3N3b3JkKFxuLy8gICAgICAgICAgICAgICAgIGlkLFxuLy8gICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuLy8gICAgICAgICAgICAgICAgIG5ld1Bhc3N3b3JkLFxuLy8gICAgICAgICAgICAgICAgIG5ld1Bhc3N3b3JkQ29uZmlybSxcbi8vICAgICAgICAgICAgICAgICAoKSA9PiB7fVxuLy8gICAgICAgICAgICAgKVxuLy8gICAgICAgICB9KS50by50aHJvdyhcbi8vICAgICAgICAgICAgIEVycm9yLFxuLy8gICAgICAgICAgICAgJ05ldyBwYXNzd29yZCBtdXN0IGJlIGRpZmZlcmVudCBhcyBwcmV2aW91cyBwYXNzd29yZCdcbi8vICAgICAgICAgKVxuXG4vLyAgICAgICAgIGRvbmUoKVxuLy8gICAgIH0pXG5cbi8vICAgICBhZnRlcigoZG9uZSkgPT4ge1xuLy8gICAgICAgICB3cml0ZUZpbGUoYCR7cHJvY2Vzcy5lbnYuREJfUEFUSH0vdXNlcnMuanNvbmAsICdbXScsIChlcnJvcikgPT4ge1xuLy8gICAgICAgICAgICAgZG9uZSgpXG4vLyAgICAgICAgIH0pXG4vLyAgICAgfSlcbi8vIH0pXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsbUZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLCtFQUFBTSxZQUFBLElBQUFDLEtBQUEsSUFBQUMsU0FBQSxJQUFBQyxDQUFBLElBQUFDLENBQUEsSUFBQUMsQ0FBQSxJQUFBQyxlQUFBLDRDQUFBWCxJQUFBLGlEQUFBWSxRQUFBLENBQUFYLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQVMsUUFBQSxDQUFBYixJQUFBLEdBQUFhLFFBQUEsQ0FBQWIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQVksUUFBQSxDQUFBYixJQUFBLEVBQUFLLFlBQUEsTUFBQVMsY0FBQSxDQUFBRCxRQUFBLENBQUFiLElBQUEsR0F4Rlk7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUFlLGNBQUEsV0FBQUEsY0FBQSxFQUFBZixjQUFBIn0=